# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: auth
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  stage: dev
  environment:
    subpingTable: ${self:custom.stage}-subping-core
    authTable: ${self:custom.stage}-subping-auths
    keyTable: ${self:custom.stage}-subping-keys

package:
  individually: true

iamRoleStatements:
  - Effect: "Allow"
    Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem

    Resource:
      Fn::Join:
        - "Fn::GetAtt": [ AuthsTable, Arn ]
        - "Fn::GetAtt": [ SubpingTable, Arn ]
        - "Fn::GetAtt": [ KeyTable, Arn ]

functions:
  rsa:
    handler: ./handler/rsa/rsa.handler
    events:
      - http:
          path: rsa
          method: get
          cors: true
          
  emailDuplicate:
    handler: ./handler/signUp/emailDuplicate.handler
    events:
      - http:
          path: emailDuplicate
          method: post
          cors: true

  signUpStart:
    handler: ./handler/signUp/signUpStart.handler
    events:
      - http:
          path: signUpStart
          method: post
          cors: true

  signUpDone:
    handler: ./handler/signUp/signUpDone.handler
    events:
      - http:
          path: signUpDone
          method: post
          cors: true
    
  onboardingStep:
    handler: ./handler/onboarding/onboardingStep.handler
    events:
      - http:
          path: onboardingStep
          method: get
          cors: true
          authorizer: aws_iam
    

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
